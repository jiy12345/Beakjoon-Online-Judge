#include<iostream>
using namespace std;

/*
1. 문제 분석
- 변수
N: 수열 A의 크기

- 변수 제한 사항
N: 1~1,000
수열 A를 이루고 있는 수의 크기: 1~10,000

- 문제 상황
수열 A의 가장 긴 증가하는 부분수열의 길이를 출력하라

2. 풀이 계획
각 위치를 선택하느냐, 선택하지 않느냐에 따라 수열이 달라질 수 있다!
그리고 각 위치까지의 최장 증가 부분 수열의 크기는 항상 같으므로, 현 위치보다 다음 수가 작은 수만 아니라면 문제없이 적용이 가능하다!

따라서 자세한 계획은 다음과 같다.
1. 배열에 수열을 입력받는다..
2. BFS로 N번째 항 부터 선택을 하느냐 하지 않느냐에 따른 모든 위치에서의 최대값을 계산하고,
 => 현 위치를 선택했을 때: 현 위치의 수를 넘겨주며 이전 수에 대한 재귀적 호출을 진행한다.
                           => 저장된 값이 있을 경우 현 위치의 값을 반환한다.
 => 현 위치를 선택하지 않았을 때: 더 앞의 수로부터 전달받은 수를 넘겨주며, 
                           => 저장된 값을 쓸 필요 없이 재귀적 호출을 진행한다.
*/

// 각 위치에 어떤 방식으로 왔느냐에 따라 정해진 최대값
// 0: 한계단 오르기, 1: 두계단 오르기
int max_lengths[1000] = { {0, } };
// 값을 입력받을 배열
int A[1000] = { 0, };

int N; // 수열의 길이

// n: 현재 수열의 항 번호
// min_boundary: 부분수열에서 다음항의 수(이 수보다 작아야 고려됨)
// length: 길이를 재기 위한 변수
int solution(int n, int min_boundary, int length) {
    // 현재 항이 부분수열에서 다음 항보다 큼!
    if (min_boundary < A[n]) {
        // 더 클 경우

    }

    int max_length;
    
}

int main() {
    cin >> N;

    for (int i = 0;i < N;i++) {
        cin >> A[i];
    }

    cout << solution(N - 1, 1001);
}