#include<iostream>
using namespace std;

/*
1. 문제 분석
- 변수
 n: 직사각형의 길이

- 변수 제한 사항
 N: 1~1,000

- 문제 상황
 2×n 직사각형을 1×2, 2×1과 2×2 타일로 채우는 방법의 수를 구하여라

2. 풀이 계획
 - 전체 문제: 2×n 직사각형을 채우는 방법의 수 구하기
 - 부분 문제: 2×k 직사각형을 채우는 방법의 수 구하기

 k 길이의 직사각형을 채우는 경우의 수는 다음과 같이 세가지 경우의 수로 나눌 수 있다.

 - 1×2 타일 2개로 이전 위치를 채우는 경우: k-2 위치의 경우의 수를 더하면 된다.
 - 2×1 타일 1개로 이전 위치를 채우는 경우: k-1 위치의 경우의 수를 더하면 된다.
 - 2×2 타일 1개로 이전 위치를 채우는 경우: k-2 위치의 경우의 수를 더하면 된다.

 따라서 점화식으로 써보면 다음과 같다.

 dp[n] = dp[n-1] + 2*dp[n-2]


3. 계획 검증


*/

// 각 항까지의 최대값을 저장할 배열
int dp[1000] = { 0, };

int n;

int solution() {
	dp[0] = 1; // (2×1)
	dp[1] = 3; // (2×1 2개), (1×2 2개), (2×2 1개)

	for (int i = 2; i < n; i++) {
		dp[i] = (dp[i - 1] + 2 * dp[i - 2]) % 10007;
	}

	return dp[n - 1] % 10007;
}


int main() {
	cin >> n;

	cout << solution();
}
