#include<iostream>
using namespace std;

/*
1. 문제 분석
- 변수
 N: 만들어야 하는 타일의 길이

- 변수 제한 사항
 N: 1~1,000,000

- 문제 상황
'1' 타일과 '00'타일이 있을 때, N 길이의 타일을 만드는 경우의 수를 구하자!

2. 풀이 계획
 - 전체 문제: N 길이의 타일을 만드는 경우의 수 구하기
 - 부분 문제: k(1 <= k < N) 길이의 타일을 만드는 경우의 수 구하기 

 k 길이의 직사각형을 채우는 경우의 수는 다음과 같이 두가지 경우의 수로 나눌 수 있다.

 - 현재 타일을 '00'타일로 채우는 경우: 두 칸 이전의 경우의 수를 더하면 된다.
 - 현재 타일을 '1'타일로 채우는 경우: 한 칸 이전의 경우의 수를 더하면 된다.

 따라서 점화식으로 써보면 다음과 같다.

 dp[n] = dp[n-1] + 2*dp[n-2]

3. 계획 검증


*/

// 각 항까지의 경우의 수를 저장할 배열
int dp[1000000] = { 0, };

int n;

int solution() {
	dp[0] = 1; // 1
	dp[1] = 2; // 00, 11

	for (int i = 2; i < n; i++) {
		dp[i] = (dp[i - 1] + dp[i - 2]) % 15746;
	}

	return dp[n - 1] % 15746;
}


int main() {
	cin >> n;

	cout << solution();
}
