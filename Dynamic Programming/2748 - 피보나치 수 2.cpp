#include<iostream>
using namespace std;

/*
1. 문제 분석
- 변수
 n: 피보나치 수에서 항 번호

- 변수 제한 사항
 n: 1~90

- 문제 상황
 포도주 시식에 다음과 같은 규칙이 있을 때,

1. 포도주 잔을 선택하면 그 잔에 들어있는 포도주는 모두 마셔야 하고, 마신 후에는 원래 위치에 다시 놓아야 한다.
2. 연속으로 놓여 있는 3잔을 모두 마실 수는 없다.

최대로 마실 수 잇는 포도주의 양을 출력한다!

2. 풀이 계획
 n번째 피보나치 수를 구하여라


3. 계획 검증
각각이 최대값을 유지하고 있는가, 규칙을 어기고 있지는 않은가를 봐야함!

허점이 있을거라고 예상을 하긴 했는데 실제로 허점이 발생하였다!
처음에는 현재 잔을 마시는 경우만 포함하여 비교하였는데, 이렇게 될 경우 고려하지 못하는 경우의 수가 발생하게 된다!

현재잔을 마시지 말아야만 하는 경우에는 최대값을 제대로 고려하지 못하게 되는 것이다!

*/

// 각 항까지의 최대값을 저장할 배열
long long dp[90] = { 0, };

int n;

long long solution() {
	dp[0] = 1;
	dp[1] = 1;

	for (int i = 2; i < n; i++) {
		// 점화식: Fn = Fn-1 + Fn-2 (n ≥ 2)
		dp[i] = dp[i - 1] + dp[i - 2];
	}

	return dp[n - 1];
}


int main() {
	cin >> n;

	cout << solution();
}
