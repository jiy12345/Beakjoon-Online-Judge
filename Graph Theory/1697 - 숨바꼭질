#include<iostream>
#include<queue>
using namespace std;

int N, K;
bool is_explored[100001] = { false, }; // 위치를 나타낼 배열.



int solution() {
  if (K <= N) { // 동생이 더 뒤에 있을 경우 뒤로 가는 방법은 하나씩밖에 못가므로
		return N - K;
	}

	int answer = 0;

	queue<vector<int>> bfs_queue; // 위치, 현재 깊이 저장

	bfs_queue.push({ N, 0 }); // 현 위치 큐에 푸시

  // 현 위치 방문했다는 표시
	is_explored[N] = true;

	while (!bfs_queue.empty()) {
		int cur_location = bfs_queue.front()[0];
		int cur_depth = bfs_queue.front()[1];
		bfs_queue.pop();
		
    // 위치에 도착했을 경우 현재 위치의 깊이 리턴
		if (cur_location == K) {
			return cur_depth;
		}

		// 뒤로가기
		if (cur_location - 1 >= 0) { 
			if (is_explored[cur_location - 1] == false) {
				is_explored[cur_location - 1] = true;
				bfs_queue.push({ cur_location - 1, cur_depth + 1 });
			}
		}

		// 앞으로 가기
		if (cur_location + 1 <= 100000) {
			if (is_explored[cur_location + 1] == false) {
				is_explored[cur_location + 1] = true;
				bfs_queue.push({ cur_location + 1, cur_depth + 1 });
			}
		}

		// 앞으로 가기
		if (2 * cur_location <= 100000) {
			if (is_explored[2 * cur_location] == false) {
				is_explored[2 * cur_location] = true;
				bfs_queue.push({ 2 * cur_location, cur_depth + 1 });
			}
		}

	}
}

int main() {
	cin >> N >> K;

	cout << solution();
}
